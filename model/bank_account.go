// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankAccount bank account
//
// swagger:model BankAccount
type BankAccount struct {

	// account identification
	AccountIdentification string `json:"AccountIdentification,omitempty"`

	// active
	Active bool `json:"Active,omitempty"`

	// b i c
	BIC string `json:"BIC,omitempty"`

	// bank account name
	BankAccountName string `json:"BankAccountName,omitempty"`

	// bank provider status
	BankProviderStatus string `json:"BankProviderStatus,omitempty"`

	// country code
	CountryCode string `json:"CountryCode,omitempty"`

	// currency
	Currency string `json:"Currency,omitempty"`

	// external provider ID
	ExternalProviderID string `json:"ExternalProviderID,omitempty"`

	// i b a n
	IBAN string `json:"IBAN,omitempty"`

	// logo file ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	LogoFileID strfmt.UUID `json:"LogoFileID,omitempty"`

	// logo file Url
	LogoFileURL string `json:"LogoFileUrl,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// saldo
	Saldo float64 `json:"Saldo,omitempty"`

	// verified
	Verified bool `json:"Verified,omitempty"`
}

// Validate validates this bank account
func (m *BankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogoFileID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankAccount) validateLogoFileID(formats strfmt.Registry) error {
	if swag.IsZero(m.LogoFileID) { // not required
		return nil
	}

	if err := validate.FormatOf("LogoFileID", "body", "uuid", m.LogoFileID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bank account based on context it is used
func (m *BankAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BankAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankAccount) UnmarshalBinary(b []byte) error {
	var res BankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
