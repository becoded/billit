// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParticipantInformationResponse participant information response
//
// swagger:model ParticipantInformationResponse
type ParticipantInformationResponse struct {

	// document types
	DocumentTypes []string `json:"DocumentTypes"`

	// identifier
	Identifier string `json:"Identifier,omitempty"`

	// registered
	Registered bool `json:"Registered,omitempty"`

	// service details
	ServiceDetails []*ServiceDetail `json:"ServiceDetails"`

	// service provider ID
	ServiceProviderID string `json:"ServiceProviderID,omitempty"`
}

// Validate validates this participant information response
func (m *ParticipantInformationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocumentTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var participantInformationResponseDocumentTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Invoice4","Invoice5","CreditNote5","MLR","MLRBISV3","MLRBISV2","IMR","EFFF","BISv3Invoice","BISv3CreditNote","BISv3OrderForm","BISv3AUNZInvoice","BISv3AUNZCreditNote","XRechnung22Invoice","XRechnung22CreditNote","SIInvoice","SICreditNote","UBLBEInvoice","UBLBECreditNote","CII","PTCIUSInvoice","PTCIUSCreditNote","BISv3SGInvoice","BISv3SGCreditNote","ROCIUSInvoice","ROCIUSCreditNote","XRechnung3Invoice","XRechnung3CreditNote","EndUserStatistics","TransactionStatistics","MYPintInvoice","MYPintCreditNote","MYPintInvoiceWildCard","MYPintCreditNoteWildCard","PintInvoiceWildCard","PintCreditNoteWildCard","AUNZPintInvoice","AUNZPintCreditNote"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		participantInformationResponseDocumentTypesItemsEnum = append(participantInformationResponseDocumentTypesItemsEnum, v)
	}
}

func (m *ParticipantInformationResponse) validateDocumentTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, participantInformationResponseDocumentTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ParticipantInformationResponse) validateDocumentTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.DocumentTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.DocumentTypes); i++ {

		// value enum
		if err := m.validateDocumentTypesItemsEnum("DocumentTypes"+"."+strconv.Itoa(i), "body", m.DocumentTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ParticipantInformationResponse) validateServiceDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceDetails); i++ {
		if swag.IsZero(m.ServiceDetails[i]) { // not required
			continue
		}

		if m.ServiceDetails[i] != nil {
			if err := m.ServiceDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ServiceDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ServiceDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this participant information response based on the context it is used
func (m *ParticipantInformationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParticipantInformationResponse) contextValidateServiceDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServiceDetails); i++ {

		if m.ServiceDetails[i] != nil {

			if swag.IsZero(m.ServiceDetails[i]) { // not required
				return nil
			}

			if err := m.ServiceDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ServiceDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ServiceDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParticipantInformationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParticipantInformationResponse) UnmarshalBinary(b []byte) error {
	var res ParticipantInformationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
