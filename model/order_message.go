// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderMessage order message
//
// swagger:model OrderMessage
type OrderMessage struct {

	// creation date
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"CreationDate,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// destination
	Destination string `json:"Destination,omitempty"`

	// file ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FileID strfmt.UUID `json:"FileID,omitempty"`

	// message direction
	MessageDirection string `json:"MessageDirection,omitempty"`

	// order ID
	OrderID int32 `json:"OrderID,omitempty"`

	// success
	Success bool `json:"Success,omitempty"`

	// transport type
	TransportType string `json:"TransportType,omitempty"`

	// trials
	Trials int32 `json:"Trials,omitempty"`
}

// Validate validates this order message
func (m *OrderMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderMessage) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("CreationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderMessage) validateFileID(formats strfmt.Registry) error {
	if swag.IsZero(m.FileID) { // not required
		return nil
	}

	if err := validate.FormatOf("FileID", "body", "uuid", m.FileID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this order message based on context it is used
func (m *OrderMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrderMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderMessage) UnmarshalBinary(b []byte) error {
	var res OrderMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
