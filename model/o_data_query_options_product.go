// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ODataQueryOptionsProduct o data query options product
//
// swagger:model ODataQueryOptions_Product
type ODataQueryOptionsProduct struct {

	// context
	// Read Only: true
	Context *ODataQueryContext `json:"Context,omitempty"`

	// filter
	// Read Only: true
	Filter *FilterQueryOption `json:"Filter,omitempty"`

	// if match
	// Read Only: true
	IfMatch interface{} `json:"IfMatch,omitempty"`

	// if none match
	// Read Only: true
	IfNoneMatch interface{} `json:"IfNoneMatch,omitempty"`

	// inline count
	// Read Only: true
	InlineCount *InlineCountQueryOption `json:"InlineCount,omitempty"`

	// order by
	// Read Only: true
	OrderBy *OrderByQueryOption `json:"OrderBy,omitempty"`

	// raw values
	// Read Only: true
	RawValues *ODataRawQueryOptions `json:"RawValues,omitempty"`

	// request
	// Read Only: true
	Request interface{} `json:"Request,omitempty"`

	// select expand
	// Read Only: true
	SelectExpand *SelectExpandQueryOption `json:"SelectExpand,omitempty"`

	// skip
	// Read Only: true
	Skip *SkipQueryOption `json:"Skip,omitempty"`

	// top
	// Read Only: true
	Top *TopQueryOption `json:"Top,omitempty"`

	// validator
	Validator ODataQueryValidator `json:"Validator,omitempty"`
}

// Validate validates this o data query options product
func (m *ODataQueryOptionsProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInlineCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRawValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectExpand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ODataQueryOptionsProduct) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Context")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) validateFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Filter")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) validateInlineCount(formats strfmt.Registry) error {
	if swag.IsZero(m.InlineCount) { // not required
		return nil
	}

	if m.InlineCount != nil {
		if err := m.InlineCount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InlineCount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("InlineCount")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) validateOrderBy(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderBy) { // not required
		return nil
	}

	if m.OrderBy != nil {
		if err := m.OrderBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderBy")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) validateRawValues(formats strfmt.Registry) error {
	if swag.IsZero(m.RawValues) { // not required
		return nil
	}

	if m.RawValues != nil {
		if err := m.RawValues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RawValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RawValues")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) validateSelectExpand(formats strfmt.Registry) error {
	if swag.IsZero(m.SelectExpand) { // not required
		return nil
	}

	if m.SelectExpand != nil {
		if err := m.SelectExpand.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SelectExpand")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SelectExpand")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) validateSkip(formats strfmt.Registry) error {
	if swag.IsZero(m.Skip) { // not required
		return nil
	}

	if m.Skip != nil {
		if err := m.Skip.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Skip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Skip")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) validateTop(formats strfmt.Registry) error {
	if swag.IsZero(m.Top) { // not required
		return nil
	}

	if m.Top != nil {
		if err := m.Top.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Top")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Top")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o data query options product based on the context it is used
func (m *ODataQueryOptionsProduct) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInlineCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRawValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelectExpand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkip(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTop(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ODataQueryOptionsProduct) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if m.Context != nil {

		if swag.IsZero(m.Context) { // not required
			return nil
		}

		if err := m.Context.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Context")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.Filter != nil {

		if swag.IsZero(m.Filter) { // not required
			return nil
		}

		if err := m.Filter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Filter")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) contextValidateInlineCount(ctx context.Context, formats strfmt.Registry) error {

	if m.InlineCount != nil {

		if swag.IsZero(m.InlineCount) { // not required
			return nil
		}

		if err := m.InlineCount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InlineCount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("InlineCount")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) contextValidateOrderBy(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderBy != nil {

		if swag.IsZero(m.OrderBy) { // not required
			return nil
		}

		if err := m.OrderBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderBy")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) contextValidateRawValues(ctx context.Context, formats strfmt.Registry) error {

	if m.RawValues != nil {

		if swag.IsZero(m.RawValues) { // not required
			return nil
		}

		if err := m.RawValues.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RawValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RawValues")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) contextValidateSelectExpand(ctx context.Context, formats strfmt.Registry) error {

	if m.SelectExpand != nil {

		if swag.IsZero(m.SelectExpand) { // not required
			return nil
		}

		if err := m.SelectExpand.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SelectExpand")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SelectExpand")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) contextValidateSkip(ctx context.Context, formats strfmt.Registry) error {

	if m.Skip != nil {

		if swag.IsZero(m.Skip) { // not required
			return nil
		}

		if err := m.Skip.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Skip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Skip")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryOptionsProduct) contextValidateTop(ctx context.Context, formats strfmt.Registry) error {

	if m.Top != nil {

		if swag.IsZero(m.Top) { // not required
			return nil
		}

		if err := m.Top.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Top")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Top")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ODataQueryOptionsProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ODataQueryOptionsProduct) UnmarshalBinary(b []byte) error {
	var res ODataQueryOptionsProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
