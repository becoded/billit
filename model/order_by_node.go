// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderByNode order by node
//
// swagger:model OrderByNode
type OrderByNode struct {

	// direction
	// Read Only: true
	// Enum: ["Ascending","Descending"]
	Direction string `json:"Direction,omitempty"`
}

// Validate validates this order by node
func (m *OrderByNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var orderByNodeTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Ascending","Descending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderByNodeTypeDirectionPropEnum = append(orderByNodeTypeDirectionPropEnum, v)
	}
}

const (

	// OrderByNodeDirectionAscending captures enum value "Ascending"
	OrderByNodeDirectionAscending string = "Ascending"

	// OrderByNodeDirectionDescending captures enum value "Descending"
	OrderByNodeDirectionDescending string = "Descending"
)

// prop value enum
func (m *OrderByNode) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderByNodeTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderByNode) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order by node based on the context it is used
func (m *OrderByNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderByNode) contextValidateDirection(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Direction", "body", string(m.Direction)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderByNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderByNode) UnmarshalBinary(b []byte) error {
	var res OrderByNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
