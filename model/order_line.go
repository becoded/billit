// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrderLine order line
//
// swagger:model OrderLine
type OrderLine struct {

	// account code
	AccountCode int32 `json:"AccountCode,omitempty"`

	// analytic cost bearer
	AnalyticCostBearer string `json:"AnalyticCostBearer,omitempty"`

	// analytic cost center
	AnalyticCostCenter string `json:"AnalyticCostCenter,omitempty"`

	// custom fields
	CustomFields map[string]string `json:"CustomFields,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// description extended
	DescriptionExtended string `json:"DescriptionExtended,omitempty"`

	// external provider references
	ExternalProviderReferences []*ExternalProviderReference `json:"ExternalProviderReferences"`

	// incl leading
	InclLeading bool `json:"InclLeading,omitempty"`

	// product ID
	ProductID int32 `json:"ProductID,omitempty"`

	// quantity
	Quantity float64 `json:"Quantity,omitempty"`

	// reduction percentage
	ReductionPercentage float64 `json:"ReductionPercentage,omitempty"`

	// reference
	Reference string `json:"Reference,omitempty"`

	// total excl
	TotalExcl float64 `json:"TotalExcl,omitempty"`

	// total incl
	TotalIncl float64 `json:"TotalIncl,omitempty"`

	// total v a t
	TotalVAT float64 `json:"TotalVAT,omitempty"`

	// unit
	Unit string `json:"Unit,omitempty"`

	// unit price excl
	UnitPriceExcl float64 `json:"UnitPriceExcl,omitempty"`

	// unit price incl
	UnitPriceIncl float64 `json:"UnitPriceIncl,omitempty"`

	// v a t percentage
	VATPercentage float64 `json:"VATPercentage,omitempty"`

	// ventilation code
	VentilationCode string `json:"VentilationCode,omitempty"`
}

// Validate validates this order line
func (m *OrderLine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalProviderReferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLine) validateExternalProviderReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalProviderReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalProviderReferences); i++ {
		if swag.IsZero(m.ExternalProviderReferences[i]) { // not required
			continue
		}

		if m.ExternalProviderReferences[i] != nil {
			if err := m.ExternalProviderReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExternalProviderReferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ExternalProviderReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this order line based on the context it is used
func (m *OrderLine) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalProviderReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLine) contextValidateExternalProviderReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalProviderReferences); i++ {

		if m.ExternalProviderReferences[i] != nil {

			if swag.IsZero(m.ExternalProviderReferences[i]) { // not required
				return nil
			}

			if err := m.ExternalProviderReferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExternalProviderReferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ExternalProviderReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderLine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderLine) UnmarshalBinary(b []byte) error {
	var res OrderLine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
