// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RangeVariable range variable
//
// swagger:model RangeVariable
type RangeVariable struct {

	// kind
	// Read Only: true
	Kind int32 `json:"Kind,omitempty"`

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// type reference
	// Read Only: true
	TypeReference *IEdmTypeReference `json:"TypeReference,omitempty"`
}

// Validate validates this range variable
func (m *RangeVariable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypeReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RangeVariable) validateTypeReference(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeReference) { // not required
		return nil
	}

	if m.TypeReference != nil {
		if err := m.TypeReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeReference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this range variable based on the context it is used
func (m *RangeVariable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RangeVariable) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Kind", "body", int32(m.Kind)); err != nil {
		return err
	}

	return nil
}

func (m *RangeVariable) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *RangeVariable) contextValidateTypeReference(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeReference != nil {

		if swag.IsZero(m.TypeReference) { // not required
			return nil
		}

		if err := m.TypeReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeReference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RangeVariable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RangeVariable) UnmarshalBinary(b []byte) error {
	var res RangeVariable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
