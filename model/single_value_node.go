// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SingleValueNode single value node
//
// swagger:model SingleValueNode
type SingleValueNode struct {

	// kind
	// Read Only: true
	// Enum: ["None","Constant","Convert","NonentityRangeVariableReference","BinaryOperator","UnaryOperator","SingleValuePropertyAccess","CollectionPropertyAccess","SingleValueFunctionCall","Any","CollectionNavigationNode","SingleNavigationNode","SingleValueOpenPropertyAccess","SingleEntityCast","All","EntityCollectionCast","EntityRangeVariableReference","SingleEntityFunctionCall","CollectionFunctionCall","EntityCollectionFunctionCall","NamedFunctionParameter"]
	Kind string `json:"Kind,omitempty"`

	// type reference
	// Read Only: true
	TypeReference *IEdmTypeReference `json:"TypeReference,omitempty"`
}

// Validate validates this single value node
func (m *SingleValueNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var singleValueNodeTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Constant","Convert","NonentityRangeVariableReference","BinaryOperator","UnaryOperator","SingleValuePropertyAccess","CollectionPropertyAccess","SingleValueFunctionCall","Any","CollectionNavigationNode","SingleNavigationNode","SingleValueOpenPropertyAccess","SingleEntityCast","All","EntityCollectionCast","EntityRangeVariableReference","SingleEntityFunctionCall","CollectionFunctionCall","EntityCollectionFunctionCall","NamedFunctionParameter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		singleValueNodeTypeKindPropEnum = append(singleValueNodeTypeKindPropEnum, v)
	}
}

const (

	// SingleValueNodeKindNone captures enum value "None"
	SingleValueNodeKindNone string = "None"

	// SingleValueNodeKindConstant captures enum value "Constant"
	SingleValueNodeKindConstant string = "Constant"

	// SingleValueNodeKindConvert captures enum value "Convert"
	SingleValueNodeKindConvert string = "Convert"

	// SingleValueNodeKindNonentityRangeVariableReference captures enum value "NonentityRangeVariableReference"
	SingleValueNodeKindNonentityRangeVariableReference string = "NonentityRangeVariableReference"

	// SingleValueNodeKindBinaryOperator captures enum value "BinaryOperator"
	SingleValueNodeKindBinaryOperator string = "BinaryOperator"

	// SingleValueNodeKindUnaryOperator captures enum value "UnaryOperator"
	SingleValueNodeKindUnaryOperator string = "UnaryOperator"

	// SingleValueNodeKindSingleValuePropertyAccess captures enum value "SingleValuePropertyAccess"
	SingleValueNodeKindSingleValuePropertyAccess string = "SingleValuePropertyAccess"

	// SingleValueNodeKindCollectionPropertyAccess captures enum value "CollectionPropertyAccess"
	SingleValueNodeKindCollectionPropertyAccess string = "CollectionPropertyAccess"

	// SingleValueNodeKindSingleValueFunctionCall captures enum value "SingleValueFunctionCall"
	SingleValueNodeKindSingleValueFunctionCall string = "SingleValueFunctionCall"

	// SingleValueNodeKindAny captures enum value "Any"
	SingleValueNodeKindAny string = "Any"

	// SingleValueNodeKindCollectionNavigationNode captures enum value "CollectionNavigationNode"
	SingleValueNodeKindCollectionNavigationNode string = "CollectionNavigationNode"

	// SingleValueNodeKindSingleNavigationNode captures enum value "SingleNavigationNode"
	SingleValueNodeKindSingleNavigationNode string = "SingleNavigationNode"

	// SingleValueNodeKindSingleValueOpenPropertyAccess captures enum value "SingleValueOpenPropertyAccess"
	SingleValueNodeKindSingleValueOpenPropertyAccess string = "SingleValueOpenPropertyAccess"

	// SingleValueNodeKindSingleEntityCast captures enum value "SingleEntityCast"
	SingleValueNodeKindSingleEntityCast string = "SingleEntityCast"

	// SingleValueNodeKindAll captures enum value "All"
	SingleValueNodeKindAll string = "All"

	// SingleValueNodeKindEntityCollectionCast captures enum value "EntityCollectionCast"
	SingleValueNodeKindEntityCollectionCast string = "EntityCollectionCast"

	// SingleValueNodeKindEntityRangeVariableReference captures enum value "EntityRangeVariableReference"
	SingleValueNodeKindEntityRangeVariableReference string = "EntityRangeVariableReference"

	// SingleValueNodeKindSingleEntityFunctionCall captures enum value "SingleEntityFunctionCall"
	SingleValueNodeKindSingleEntityFunctionCall string = "SingleEntityFunctionCall"

	// SingleValueNodeKindCollectionFunctionCall captures enum value "CollectionFunctionCall"
	SingleValueNodeKindCollectionFunctionCall string = "CollectionFunctionCall"

	// SingleValueNodeKindEntityCollectionFunctionCall captures enum value "EntityCollectionFunctionCall"
	SingleValueNodeKindEntityCollectionFunctionCall string = "EntityCollectionFunctionCall"

	// SingleValueNodeKindNamedFunctionParameter captures enum value "NamedFunctionParameter"
	SingleValueNodeKindNamedFunctionParameter string = "NamedFunctionParameter"
)

// prop value enum
func (m *SingleValueNode) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, singleValueNodeTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SingleValueNode) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("Kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *SingleValueNode) validateTypeReference(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeReference) { // not required
		return nil
	}

	if m.TypeReference != nil {
		if err := m.TypeReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeReference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this single value node based on the context it is used
func (m *SingleValueNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SingleValueNode) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Kind", "body", string(m.Kind)); err != nil {
		return err
	}

	return nil
}

func (m *SingleValueNode) contextValidateTypeReference(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeReference != nil {

		if swag.IsZero(m.TypeReference) { // not required
			return nil
		}

		if err := m.TypeReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeReference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SingleValueNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SingleValueNode) UnmarshalBinary(b []byte) error {
	var res SingleValueNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
