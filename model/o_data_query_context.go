// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ODataQueryContext o data query context
//
// swagger:model ODataQueryContext
type ODataQueryContext struct {

	// element clr type
	// Read Only: true
	ElementClrType string `json:"ElementClrType,omitempty"`

	// element type
	// Read Only: true
	ElementType *IEdmType `json:"ElementType,omitempty"`

	// model
	// Read Only: true
	Model *IEdmModel `json:"Model,omitempty"`
}

// Validate validates this o data query context
func (m *ODataQueryContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateElementType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ODataQueryContext) validateElementType(formats strfmt.Registry) error {
	if swag.IsZero(m.ElementType) { // not required
		return nil
	}

	if m.ElementType != nil {
		if err := m.ElementType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ElementType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ElementType")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryContext) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Model")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o data query context based on the context it is used
func (m *ODataQueryContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateElementClrType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElementType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ODataQueryContext) contextValidateElementClrType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ElementClrType", "body", string(m.ElementClrType)); err != nil {
		return err
	}

	return nil
}

func (m *ODataQueryContext) contextValidateElementType(ctx context.Context, formats strfmt.Registry) error {

	if m.ElementType != nil {

		if swag.IsZero(m.ElementType) { // not required
			return nil
		}

		if err := m.ElementType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ElementType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ElementType")
			}
			return err
		}
	}

	return nil
}

func (m *ODataQueryContext) contextValidateModel(ctx context.Context, formats strfmt.Registry) error {

	if m.Model != nil {

		if swag.IsZero(m.Model) { // not required
			return nil
		}

		if err := m.Model.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Model")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ODataQueryContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ODataQueryContext) UnmarshalBinary(b []byte) error {
	var res ODataQueryContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
