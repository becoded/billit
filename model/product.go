// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Product product
//
// swagger:model Product
type Product struct {

	// amount excl
	AmountExcl float64 `json:"AmountExcl,omitempty"`

	// amount incl
	AmountIncl float64 `json:"AmountIncl,omitempty"`

	// buy excl
	BuyExcl float64 `json:"BuyExcl,omitempty"`

	// child products
	ChildProducts []*Product `json:"ChildProducts"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"Created,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// e a n
	EAN string `json:"EAN,omitempty"`

	// external provider t c
	ExternalProviderTC string `json:"ExternalProviderTC,omitempty"`

	// g l n
	GLN string `json:"GLN,omitempty"`

	// g t i n
	GTIN string `json:"GTIN,omitempty"`

	// group ID
	GroupID int32 `json:"GroupID,omitempty"`

	// group name
	GroupName string `json:"GroupName,omitempty"`

	// internal information
	InternalInformation string `json:"InternalInformation,omitempty"`

	// last modified
	// Format: date-time
	LastModified strfmt.DateTime `json:"LastModified,omitempty"`

	// minimum billed quantity
	MinimumBilledQuantity float64 `json:"MinimumBilledQuantity,omitempty"`

	// product ID
	ProductID int32 `json:"ProductID,omitempty"`

	// reference
	Reference string `json:"Reference,omitempty"`

	// stock quantity
	StockQuantity float64 `json:"StockQuantity,omitempty"`

	// unit
	Unit string `json:"Unit,omitempty"`

	// v a t
	VAT float64 `json:"VAT,omitempty"`
}

// Validate validates this product
func (m *Product) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Product) validateChildProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildProducts) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildProducts); i++ {
		if swag.IsZero(m.ChildProducts[i]) { // not required
			continue
		}

		if m.ChildProducts[i] != nil {
			if err := m.ChildProducts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChildProducts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ChildProducts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Product) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("Created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this product based on the context it is used
func (m *Product) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Product) contextValidateChildProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildProducts); i++ {

		if m.ChildProducts[i] != nil {

			if swag.IsZero(m.ChildProducts[i]) { // not required
				return nil
			}

			if err := m.ChildProducts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ChildProducts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ChildProducts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Product) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Product) UnmarshalBinary(b []byte) error {
	var res Product
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
