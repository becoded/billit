// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EInvoiceSignatureModel e invoice signature model
//
// swagger:model EInvoiceSignatureModel
type EInvoiceSignatureModel struct {

	// cfdi
	Cfdi string `json:"Cfdi,omitempty"`

	// date time info
	DateTimeInfo *TimezoneInfo `json:"DateTimeInfo,omitempty"`

	// document certificate number
	DocumentCertificateNumber string `json:"DocumentCertificateNumber,omitempty"`

	// document stamp
	DocumentStamp string `json:"DocumentStamp,omitempty"`

	// network certificate number
	NetworkCertificateNumber string `json:"NetworkCertificateNumber,omitempty"`

	// network stamp
	NetworkStamp string `json:"NetworkStamp,omitempty"`

	// orginal string
	OrginalString string `json:"OrginalString,omitempty"`

	// q r code
	QRCode string `json:"QRCode,omitempty"`

	// UUID
	UUID string `json:"UUID,omitempty"`
}

// Validate validates this e invoice signature model
func (m *EInvoiceSignatureModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateTimeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EInvoiceSignatureModel) validateDateTimeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DateTimeInfo) { // not required
		return nil
	}

	if m.DateTimeInfo != nil {
		if err := m.DateTimeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DateTimeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DateTimeInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this e invoice signature model based on the context it is used
func (m *EInvoiceSignatureModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateTimeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EInvoiceSignatureModel) contextValidateDateTimeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DateTimeInfo != nil {

		if swag.IsZero(m.DateTimeInfo) { // not required
			return nil
		}

		if err := m.DateTimeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DateTimeInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DateTimeInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EInvoiceSignatureModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EInvoiceSignatureModel) UnmarshalBinary(b []byte) error {
	var res EInvoiceSignatureModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
