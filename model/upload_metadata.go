// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UploadMetadata upload metadata
//
// swagger:model UploadMetadata
type UploadMetadata struct {

	// cost type
	CostType string `json:"CostType,omitempty"`

	// currency t c
	CurrencyTC string `json:"CurrencyTC,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// order date
	// Format: date-time
	OrderDate strfmt.DateTime `json:"OrderDate,omitempty"`

	// payment method
	PaymentMethod string `json:"PaymentMethod,omitempty"`

	// total incl
	TotalIncl float64 `json:"TotalIncl,omitempty"`
}

// Validate validates this upload metadata
func (m *UploadMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UploadMetadata) validateOrderDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDate) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderDate", "body", "date-time", m.OrderDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upload metadata based on context it is used
func (m *UploadMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UploadMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UploadMetadata) UnmarshalBinary(b []byte) error {
	var res UploadMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
