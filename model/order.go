// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
//
// swagger:model Order
type Order struct {

	// about invoice number
	AboutInvoiceNumber string `json:"AboutInvoiceNumber,omitempty"`

	// account code
	AccountCode int32 `json:"AccountCode,omitempty"`

	// accountant verification needed
	AccountantVerificationNeeded bool `json:"AccountantVerificationNeeded,omitempty"`

	// accounting cost type t c
	AccountingCostTypeTC string `json:"AccountingCostTypeTC,omitempty"`

	// additional document reference
	AdditionalDocumentReference []*AdditionalDocuments `json:"AdditionalDocumentReference"`

	// analytic cost bearer
	AnalyticCostBearer string `json:"AnalyticCostBearer,omitempty"`

	// analytic cost center
	AnalyticCostCenter string `json:"AnalyticCostCenter,omitempty"`

	// approval status
	ApprovalStatus string `json:"ApprovalStatus,omitempty"`

	// attachments
	Attachments []*File `json:"Attachments"`

	// booking entries
	BookingEntries []*BookingEntry `json:"BookingEntries"`

	// category field items
	CategoryFieldItems []*CategoryFieldItem `json:"CategoryFieldItems"`

	// comments
	Comments string `json:"Comments,omitempty"`

	// company ID
	CompanyID int32 `json:"CompanyID,omitempty"`

	// contract document reference
	ContractDocumentReference []*ContractDocumentReference `json:"ContractDocumentReference"`

	// cost category code
	CostCategoryCode int32 `json:"CostCategoryCode,omitempty"`

	// counter party
	CounterParty *Party `json:"CounterParty,omitempty"`

	// counter party ID
	CounterPartyID int32 `json:"CounterPartyID,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"Created,omitempty"`

	// currency
	Currency string `json:"Currency,omitempty"`

	// current document delivery details
	CurrentDocumentDeliveryDetails *DocumentDeliveryDetails `json:"CurrentDocumentDeliveryDetails,omitempty"`

	// custom fields
	CustomFields map[string]string `json:"CustomFields,omitempty"`

	// customer
	Customer *Party `json:"Customer,omitempty"`

	// customer ID
	CustomerID int32 `json:"CustomerID,omitempty"`

	// days overdue
	DaysOverdue int32 `json:"DaysOverdue,omitempty"`

	// delivery date
	// Format: date-time
	DeliveryDate strfmt.DateTime `json:"DeliveryDate,omitempty"`

	// department ID
	DepartmentID int32 `json:"DepartmentID,omitempty"`

	// expiry date
	// Format: date-time
	ExpiryDate strfmt.DateTime `json:"ExpiryDate,omitempty"`

	// exported to connector
	ExportedToConnector bool `json:"ExportedToConnector,omitempty"`

	// external provider
	ExternalProvider string `json:"ExternalProvider,omitempty"`

	// external provider ID
	ExternalProviderID string `json:"ExternalProviderID,omitempty"`

	// external provider references
	ExternalProviderReferences []*ExternalProviderReference `json:"ExternalProviderReferences"`

	// f x rate to foreign
	FXRateToForeign float64 `json:"FXRateToForeign,omitempty"`

	// internal info
	InternalInfo string `json:"InternalInfo,omitempty"`

	// invoiced
	Invoiced bool `json:"Invoiced,omitempty"`

	// is sent
	IsSent bool `json:"IsSent,omitempty"`

	// journal
	Journal string `json:"Journal,omitempty"`

	// last modified
	// Format: date-time
	LastModified strfmt.DateTime `json:"LastModified,omitempty"`

	// last reminder
	// Format: date-time
	LastReminder strfmt.DateTime `json:"LastReminder,omitempty"`

	// message template ID
	MessageTemplateID int32 `json:"MessageTemplateID,omitempty"`

	// messages
	Messages []*OrderMessage `json:"Messages"`

	// mixed use professional percentage
	MixedUseProfessionalPercentage float64 `json:"MixedUseProfessionalPercentage,omitempty"`

	// o c r meta pages
	OCRMetaPages []*OCRPage `json:"OCRMetaPages"`

	// o c r raw text
	OCRRawText string `json:"OCRRawText,omitempty"`

	// order date
	// Format: date-time
	OrderDate strfmt.DateTime `json:"OrderDate,omitempty"`

	// order direction
	OrderDirection string `json:"OrderDirection,omitempty"`

	// order ID
	OrderID int32 `json:"OrderID,omitempty"`

	// order lines
	OrderLines []*OrderLine `json:"OrderLines"`

	// order number
	OrderNumber string `json:"OrderNumber,omitempty"`

	// order p d f
	OrderPDF *File `json:"OrderPDF,omitempty"`

	// order status
	OrderStatus string `json:"OrderStatus,omitempty"`

	// order title
	OrderTitle string `json:"OrderTitle,omitempty"`

	// order type
	OrderType string `json:"OrderType,omitempty"`

	// overdue
	Overdue bool `json:"Overdue,omitempty"`

	// paid
	Paid bool `json:"Paid,omitempty"`

	// paid date
	// Format: date-time
	PaidDate strfmt.DateTime `json:"PaidDate,omitempty"`

	// payment discount amount
	PaymentDiscountAmount float64 `json:"PaymentDiscountAmount,omitempty"`

	// payment discount date
	// Format: date-time
	PaymentDiscountDate strfmt.DateTime `json:"PaymentDiscountDate,omitempty"`

	// payment discount percentage
	PaymentDiscountPercentage float64 `json:"PaymentDiscountPercentage,omitempty"`

	// payment links
	PaymentLinks []*PaymentLink `json:"PaymentLinks"`

	// payment method
	PaymentMethod string `json:"PaymentMethod,omitempty"`

	// payment reduction days
	PaymentReductionDays int32 `json:"PaymentReductionDays,omitempty"`

	// payment reference
	PaymentReference string `json:"PaymentReference,omitempty"`

	// payment terms
	PaymentTerms string `json:"PaymentTerms,omitempty"`

	// period from
	// Format: date-time
	PeriodFrom strfmt.DateTime `json:"PeriodFrom,omitempty"`

	// period till
	// Format: date-time
	PeriodTill strfmt.DateTime `json:"PeriodTill,omitempty"`

	// project ID
	ProjectID int32 `json:"ProjectID,omitempty"`

	// project name
	ProjectName string `json:"ProjectName,omitempty"`

	// reference
	Reference string `json:"Reference,omitempty"`

	// reminders sent
	RemindersSent int32 `json:"RemindersSent,omitempty"`

	// signature
	Signature *EInvoiceSignatureModel `json:"Signature,omitempty"`

	// supplier
	Supplier *Party `json:"Supplier,omitempty"`

	// supplier ID
	SupplierID int32 `json:"SupplierID,omitempty"`

	// tags
	Tags []string `json:"Tags"`

	// tax point date
	// Format: date-time
	TaxPointDate strfmt.DateTime `json:"TaxPointDate,omitempty"`

	// template ID
	TemplateID int32 `json:"TemplateID,omitempty"`

	// to pay
	ToPay float64 `json:"ToPay,omitempty"`

	// total excl
	TotalExcl float64 `json:"TotalExcl,omitempty"`

	// total incl
	TotalIncl float64 `json:"TotalIncl,omitempty"`

	// total v a t
	TotalVAT float64 `json:"TotalVAT,omitempty"`

	// vat deduction
	VatDeduction float64 `json:"VatDeduction,omitempty"`

	// vat groups
	VatGroups []*VatGroup `json:"VatGroups"`

	// ventilation code
	VentilationCode string `json:"VentilationCode,omitempty"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalDocumentReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookingEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryFieldItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractDocumentReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounterParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentDocumentDeliveryDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalProviderReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastReminder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOCRMetaPages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderPDF(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaidDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentDiscountDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodTill(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxPointDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVatGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateAdditionalDocumentReference(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalDocumentReference) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalDocumentReference); i++ {
		if swag.IsZero(m.AdditionalDocumentReference[i]) { // not required
			continue
		}

		if m.AdditionalDocumentReference[i] != nil {
			if err := m.AdditionalDocumentReference[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AdditionalDocumentReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AdditionalDocumentReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateAttachments(formats strfmt.Registry) error {
	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Attachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateBookingEntries(formats strfmt.Registry) error {
	if swag.IsZero(m.BookingEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.BookingEntries); i++ {
		if swag.IsZero(m.BookingEntries[i]) { // not required
			continue
		}

		if m.BookingEntries[i] != nil {
			if err := m.BookingEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BookingEntries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BookingEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateCategoryFieldItems(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryFieldItems) { // not required
		return nil
	}

	for i := 0; i < len(m.CategoryFieldItems); i++ {
		if swag.IsZero(m.CategoryFieldItems[i]) { // not required
			continue
		}

		if m.CategoryFieldItems[i] != nil {
			if err := m.CategoryFieldItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CategoryFieldItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CategoryFieldItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateContractDocumentReference(formats strfmt.Registry) error {
	if swag.IsZero(m.ContractDocumentReference) { // not required
		return nil
	}

	for i := 0; i < len(m.ContractDocumentReference); i++ {
		if swag.IsZero(m.ContractDocumentReference[i]) { // not required
			continue
		}

		if m.ContractDocumentReference[i] != nil {
			if err := m.ContractDocumentReference[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ContractDocumentReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ContractDocumentReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateCounterParty(formats strfmt.Registry) error {
	if swag.IsZero(m.CounterParty) { // not required
		return nil
	}

	if m.CounterParty != nil {
		if err := m.CounterParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CounterParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CounterParty")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("Created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateCurrentDocumentDeliveryDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentDocumentDeliveryDetails) { // not required
		return nil
	}

	if m.CurrentDocumentDeliveryDetails != nil {
		if err := m.CurrentDocumentDeliveryDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentDocumentDeliveryDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentDocumentDeliveryDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Customer")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("DeliveryDate", "body", "date-time", m.DeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateExpiryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpiryDate", "body", "date-time", m.ExpiryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateExternalProviderReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalProviderReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalProviderReferences); i++ {
		if swag.IsZero(m.ExternalProviderReferences[i]) { // not required
			continue
		}

		if m.ExternalProviderReferences[i] != nil {
			if err := m.ExternalProviderReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExternalProviderReferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ExternalProviderReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("LastModified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateLastReminder(formats strfmt.Registry) error {
	if swag.IsZero(m.LastReminder) { // not required
		return nil
	}

	if err := validate.FormatOf("LastReminder", "body", "date-time", m.LastReminder.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateOCRMetaPages(formats strfmt.Registry) error {
	if swag.IsZero(m.OCRMetaPages) { // not required
		return nil
	}

	for i := 0; i < len(m.OCRMetaPages); i++ {
		if swag.IsZero(m.OCRMetaPages[i]) { // not required
			continue
		}

		if m.OCRMetaPages[i] != nil {
			if err := m.OCRMetaPages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OCRMetaPages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OCRMetaPages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateOrderDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDate) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderDate", "body", "date-time", m.OrderDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateOrderLines(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderLines) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderLines); i++ {
		if swag.IsZero(m.OrderLines[i]) { // not required
			continue
		}

		if m.OrderLines[i] != nil {
			if err := m.OrderLines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OrderLines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OrderLines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateOrderPDF(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderPDF) { // not required
		return nil
	}

	if m.OrderPDF != nil {
		if err := m.OrderPDF.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPDF")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPDF")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validatePaidDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PaidDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PaidDate", "body", "date-time", m.PaidDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validatePaymentDiscountDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentDiscountDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PaymentDiscountDate", "body", "date-time", m.PaymentDiscountDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validatePaymentLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.PaymentLinks); i++ {
		if swag.IsZero(m.PaymentLinks[i]) { // not required
			continue
		}

		if m.PaymentLinks[i] != nil {
			if err := m.PaymentLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PaymentLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PaymentLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validatePeriodFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("PeriodFrom", "body", "date-time", m.PeriodFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validatePeriodTill(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodTill) { // not required
		return nil
	}

	if err := validate.FormatOf("PeriodTill", "body", "date-time", m.PeriodTill.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(m.Signature) { // not required
		return nil
	}

	if m.Signature != nil {
		if err := m.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Signature")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateSupplier(formats strfmt.Registry) error {
	if swag.IsZero(m.Supplier) { // not required
		return nil
	}

	if m.Supplier != nil {
		if err := m.Supplier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Supplier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Supplier")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateTaxPointDate(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxPointDate) { // not required
		return nil
	}

	if err := validate.FormatOf("TaxPointDate", "body", "date-time", m.TaxPointDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateVatGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.VatGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.VatGroups); i++ {
		if swag.IsZero(m.VatGroups[i]) { // not required
			continue
		}

		if m.VatGroups[i] != nil {
			if err := m.VatGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VatGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("VatGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this order based on the context it is used
func (m *Order) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalDocumentReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAttachments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBookingEntries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCategoryFieldItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContractDocumentReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCounterParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentDocumentDeliveryDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalProviderReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOCRMetaPages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderLines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderPDF(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupplier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVatGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) contextValidateAdditionalDocumentReference(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalDocumentReference); i++ {

		if m.AdditionalDocumentReference[i] != nil {

			if swag.IsZero(m.AdditionalDocumentReference[i]) { // not required
				return nil
			}

			if err := m.AdditionalDocumentReference[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AdditionalDocumentReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AdditionalDocumentReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateAttachments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attachments); i++ {

		if m.Attachments[i] != nil {

			if swag.IsZero(m.Attachments[i]) { // not required
				return nil
			}

			if err := m.Attachments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Attachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateBookingEntries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BookingEntries); i++ {

		if m.BookingEntries[i] != nil {

			if swag.IsZero(m.BookingEntries[i]) { // not required
				return nil
			}

			if err := m.BookingEntries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BookingEntries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BookingEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateCategoryFieldItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CategoryFieldItems); i++ {

		if m.CategoryFieldItems[i] != nil {

			if swag.IsZero(m.CategoryFieldItems[i]) { // not required
				return nil
			}

			if err := m.CategoryFieldItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CategoryFieldItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CategoryFieldItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateContractDocumentReference(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContractDocumentReference); i++ {

		if m.ContractDocumentReference[i] != nil {

			if swag.IsZero(m.ContractDocumentReference[i]) { // not required
				return nil
			}

			if err := m.ContractDocumentReference[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ContractDocumentReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ContractDocumentReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateCounterParty(ctx context.Context, formats strfmt.Registry) error {

	if m.CounterParty != nil {

		if swag.IsZero(m.CounterParty) { // not required
			return nil
		}

		if err := m.CounterParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CounterParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CounterParty")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidateCurrentDocumentDeliveryDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentDocumentDeliveryDetails != nil {

		if swag.IsZero(m.CurrentDocumentDeliveryDetails) { // not required
			return nil
		}

		if err := m.CurrentDocumentDeliveryDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentDocumentDeliveryDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CurrentDocumentDeliveryDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if m.Customer != nil {

		if swag.IsZero(m.Customer) { // not required
			return nil
		}

		if err := m.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Customer")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidateExternalProviderReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalProviderReferences); i++ {

		if m.ExternalProviderReferences[i] != nil {

			if swag.IsZero(m.ExternalProviderReferences[i]) { // not required
				return nil
			}

			if err := m.ExternalProviderReferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExternalProviderReferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ExternalProviderReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {

			if swag.IsZero(m.Messages[i]) { // not required
				return nil
			}

			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateOCRMetaPages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OCRMetaPages); i++ {

		if m.OCRMetaPages[i] != nil {

			if swag.IsZero(m.OCRMetaPages[i]) { // not required
				return nil
			}

			if err := m.OCRMetaPages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OCRMetaPages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OCRMetaPages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateOrderLines(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrderLines); i++ {

		if m.OrderLines[i] != nil {

			if swag.IsZero(m.OrderLines[i]) { // not required
				return nil
			}

			if err := m.OrderLines[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OrderLines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OrderLines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateOrderPDF(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderPDF != nil {

		if swag.IsZero(m.OrderPDF) { // not required
			return nil
		}

		if err := m.OrderPDF.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderPDF")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderPDF")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidatePaymentLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PaymentLinks); i++ {

		if m.PaymentLinks[i] != nil {

			if swag.IsZero(m.PaymentLinks[i]) { // not required
				return nil
			}

			if err := m.PaymentLinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PaymentLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PaymentLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if m.Signature != nil {

		if swag.IsZero(m.Signature) { // not required
			return nil
		}

		if err := m.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Signature")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidateSupplier(ctx context.Context, formats strfmt.Registry) error {

	if m.Supplier != nil {

		if swag.IsZero(m.Supplier) { // not required
			return nil
		}

		if err := m.Supplier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Supplier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Supplier")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidateVatGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VatGroups); i++ {

		if m.VatGroups[i] != nil {

			if swag.IsZero(m.VatGroups[i]) { // not required
				return nil
			}

			if err := m.VatGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VatGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("VatGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
