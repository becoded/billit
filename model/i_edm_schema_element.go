// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IEdmSchemaElement i edm schema element
//
// swagger:model IEdmSchemaElement
type IEdmSchemaElement struct {

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// namespace
	// Read Only: true
	Namespace string `json:"Namespace,omitempty"`

	// schema element kind
	// Read Only: true
	// Enum: ["None","TypeDefinition","Function","ValueTerm","EntityContainer"]
	SchemaElementKind string `json:"SchemaElementKind,omitempty"`
}

// Validate validates this i edm schema element
func (m *IEdmSchemaElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchemaElementKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var iEdmSchemaElementTypeSchemaElementKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","TypeDefinition","Function","ValueTerm","EntityContainer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iEdmSchemaElementTypeSchemaElementKindPropEnum = append(iEdmSchemaElementTypeSchemaElementKindPropEnum, v)
	}
}

const (

	// IEdmSchemaElementSchemaElementKindNone captures enum value "None"
	IEdmSchemaElementSchemaElementKindNone string = "None"

	// IEdmSchemaElementSchemaElementKindTypeDefinition captures enum value "TypeDefinition"
	IEdmSchemaElementSchemaElementKindTypeDefinition string = "TypeDefinition"

	// IEdmSchemaElementSchemaElementKindFunction captures enum value "Function"
	IEdmSchemaElementSchemaElementKindFunction string = "Function"

	// IEdmSchemaElementSchemaElementKindValueTerm captures enum value "ValueTerm"
	IEdmSchemaElementSchemaElementKindValueTerm string = "ValueTerm"

	// IEdmSchemaElementSchemaElementKindEntityContainer captures enum value "EntityContainer"
	IEdmSchemaElementSchemaElementKindEntityContainer string = "EntityContainer"
)

// prop value enum
func (m *IEdmSchemaElement) validateSchemaElementKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, iEdmSchemaElementTypeSchemaElementKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IEdmSchemaElement) validateSchemaElementKind(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemaElementKind) { // not required
		return nil
	}

	// value enum
	if err := m.validateSchemaElementKindEnum("SchemaElementKind", "body", m.SchemaElementKind); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this i edm schema element based on the context it is used
func (m *IEdmSchemaElement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemaElementKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IEdmSchemaElement) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *IEdmSchemaElement) contextValidateNamespace(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Namespace", "body", string(m.Namespace)); err != nil {
		return err
	}

	return nil
}

func (m *IEdmSchemaElement) contextValidateSchemaElementKind(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "SchemaElementKind", "body", string(m.SchemaElementKind)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IEdmSchemaElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IEdmSchemaElement) UnmarshalBinary(b []byte) error {
	var res IEdmSchemaElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
