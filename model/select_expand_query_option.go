// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SelectExpandQueryOption select expand query option
//
// swagger:model SelectExpandQueryOption
type SelectExpandQueryOption struct {

	// context
	// Read Only: true
	Context *ODataQueryContext `json:"Context,omitempty"`

	// raw expand
	// Read Only: true
	RawExpand string `json:"RawExpand,omitempty"`

	// raw select
	// Read Only: true
	RawSelect string `json:"RawSelect,omitempty"`

	// select expand clause
	// Read Only: true
	SelectExpandClause *SelectExpandClause `json:"SelectExpandClause,omitempty"`

	// validator
	Validator SelectExpandQueryValidator `json:"Validator,omitempty"`
}

// Validate validates this select expand query option
func (m *SelectExpandQueryOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectExpandClause(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelectExpandQueryOption) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Context")
			}
			return err
		}
	}

	return nil
}

func (m *SelectExpandQueryOption) validateSelectExpandClause(formats strfmt.Registry) error {
	if swag.IsZero(m.SelectExpandClause) { // not required
		return nil
	}

	if m.SelectExpandClause != nil {
		if err := m.SelectExpandClause.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SelectExpandClause")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SelectExpandClause")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this select expand query option based on the context it is used
func (m *SelectExpandQueryOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRawExpand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRawSelect(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelectExpandClause(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelectExpandQueryOption) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if m.Context != nil {

		if swag.IsZero(m.Context) { // not required
			return nil
		}

		if err := m.Context.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Context")
			}
			return err
		}
	}

	return nil
}

func (m *SelectExpandQueryOption) contextValidateRawExpand(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "RawExpand", "body", string(m.RawExpand)); err != nil {
		return err
	}

	return nil
}

func (m *SelectExpandQueryOption) contextValidateRawSelect(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "RawSelect", "body", string(m.RawSelect)); err != nil {
		return err
	}

	return nil
}

func (m *SelectExpandQueryOption) contextValidateSelectExpandClause(ctx context.Context, formats strfmt.Registry) error {

	if m.SelectExpandClause != nil {

		if swag.IsZero(m.SelectExpandClause) { // not required
			return nil
		}

		if err := m.SelectExpandClause.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SelectExpandClause")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SelectExpandClause")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SelectExpandQueryOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SelectExpandQueryOption) UnmarshalBinary(b []byte) error {
	var res SelectExpandQueryOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
