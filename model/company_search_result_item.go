// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompanySearchResultItem company search result item
//
// swagger:model CompanySearchResultItem
type CompanySearchResultItem struct {

	// box
	Box string `json:"Box,omitempty"`

	// city
	City string `json:"City,omitempty"`

	// commercial name
	CommercialName string `json:"CommercialName,omitempty"`

	// company identification
	CompanyIdentification string `json:"CompanyIdentification,omitempty"`

	// country
	Country string `json:"Country,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// number
	Number string `json:"Number,omitempty"`

	// Either KBO or VIES
	Source string `json:"Source,omitempty"`

	// start date
	// Format: date-time
	StartDate *strfmt.DateTime `json:"StartDate,omitempty"`

	// street
	Street string `json:"Street,omitempty"`

	// zipcode
	Zipcode string `json:"Zipcode,omitempty"`
}

// Validate validates this company search result item
func (m *CompanySearchResultItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompanySearchResultItem) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this company search result item based on context it is used
func (m *CompanySearchResultItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CompanySearchResultItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompanySearchResultItem) UnmarshalBinary(b []byte) error {
	var res CompanySearchResultItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
