// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocumentDeliveryDetails document delivery details
//
// swagger:model DocumentDeliveryDetails
type DocumentDeliveryDetails struct {

	// document delivery date
	// Format: date-time
	DocumentDeliveryDate strfmt.DateTime `json:"DocumentDeliveryDate,omitempty"`

	// document delivery info
	DocumentDeliveryInfo string `json:"DocumentDeliveryInfo,omitempty"`

	// document delivery status
	DocumentDeliveryStatus string `json:"DocumentDeliveryStatus,omitempty"`

	// document refused date
	// Format: date-time
	DocumentRefusedDate strfmt.DateTime `json:"DocumentRefusedDate,omitempty"`

	// document refused info
	DocumentRefusedInfo string `json:"DocumentRefusedInfo,omitempty"`

	// document refused reason t c
	DocumentRefusedReasonTC string `json:"DocumentRefusedReasonTC,omitempty"`

	// is document delivered
	IsDocumentDelivered bool `json:"IsDocumentDelivered,omitempty"`
}

// Validate validates this document delivery details
func (m *DocumentDeliveryDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocumentDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentRefusedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocumentDeliveryDetails) validateDocumentDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DocumentDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("DocumentDeliveryDate", "body", "date-time", m.DocumentDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DocumentDeliveryDetails) validateDocumentRefusedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DocumentRefusedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("DocumentRefusedDate", "body", "date-time", m.DocumentRefusedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this document delivery details based on context it is used
func (m *DocumentDeliveryDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DocumentDeliveryDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocumentDeliveryDetails) UnmarshalBinary(b []byte) error {
	var res DocumentDeliveryDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
