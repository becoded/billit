// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Journal journal
//
// swagger:model Journal
type Journal struct {

	// code
	Code string `json:"Code,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// journal type
	// Enum: ["Income","Cost"]
	JournalType string `json:"JournalType,omitempty"`
}

// Validate validates this journal
func (m *Journal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJournalType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var journalTypeJournalTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Income","Cost"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		journalTypeJournalTypePropEnum = append(journalTypeJournalTypePropEnum, v)
	}
}

const (

	// JournalJournalTypeIncome captures enum value "Income"
	JournalJournalTypeIncome string = "Income"

	// JournalJournalTypeCost captures enum value "Cost"
	JournalJournalTypeCost string = "Cost"
)

// prop value enum
func (m *Journal) validateJournalTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, journalTypeJournalTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Journal) validateJournalType(formats strfmt.Registry) error {
	if swag.IsZero(m.JournalType) { // not required
		return nil
	}

	// value enum
	if err := m.validateJournalTypeEnum("JournalType", "body", m.JournalType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this journal based on context it is used
func (m *Journal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Journal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Journal) UnmarshalBinary(b []byte) error {
	var res Journal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
