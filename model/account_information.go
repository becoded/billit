// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccountInformation account information
//
// swagger:model AccountInformation
type AccountInformation struct {

	// card number
	CardNumber string `json:"CardNumber,omitempty"`

	// companies
	Companies []*AccountInformationParty `json:"Companies"`

	// email
	Email string `json:"Email,omitempty"`

	// external provider ID
	ExternalProviderID string `json:"ExternalProviderID,omitempty"`

	// external provider t c
	ExternalProviderTC string `json:"ExternalProviderTC,omitempty"`

	// first name
	FirstName string `json:"FirstName,omitempty"`

	// last name
	LastName string `json:"LastName,omitempty"`

	// login or register needed
	LoginOrRegisterNeeded bool `json:"LoginOrRegisterNeeded,omitempty"`

	// national identity number
	NationalIdentityNumber string `json:"NationalIdentityNumber,omitempty"`

	// phone number
	PhoneNumber string `json:"PhoneNumber,omitempty"`

	// unique reference
	UniqueReference string `json:"UniqueReference,omitempty"`

	// user company roles
	UserCompanyRoles []*UserCompanyRole `json:"UserCompanyRoles"`
}

// Validate validates this account information
func (m *AccountInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompanies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCompanyRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountInformation) validateCompanies(formats strfmt.Registry) error {
	if swag.IsZero(m.Companies) { // not required
		return nil
	}

	for i := 0; i < len(m.Companies); i++ {
		if swag.IsZero(m.Companies[i]) { // not required
			continue
		}

		if m.Companies[i] != nil {
			if err := m.Companies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Companies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Companies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountInformation) validateUserCompanyRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.UserCompanyRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.UserCompanyRoles); i++ {
		if swag.IsZero(m.UserCompanyRoles[i]) { // not required
			continue
		}

		if m.UserCompanyRoles[i] != nil {
			if err := m.UserCompanyRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserCompanyRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UserCompanyRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this account information based on the context it is used
func (m *AccountInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompanies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserCompanyRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountInformation) contextValidateCompanies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Companies); i++ {

		if m.Companies[i] != nil {

			if swag.IsZero(m.Companies[i]) { // not required
				return nil
			}

			if err := m.Companies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Companies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Companies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountInformation) contextValidateUserCompanyRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserCompanyRoles); i++ {

		if m.UserCompanyRoles[i] != nil {

			if swag.IsZero(m.UserCompanyRoles[i]) { // not required
				return nil
			}

			if err := m.UserCompanyRoles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserCompanyRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UserCompanyRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountInformation) UnmarshalBinary(b []byte) error {
	var res AccountInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
