// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderByQueryOption order by query option
//
// swagger:model OrderByQueryOption
type OrderByQueryOption struct {

	// context
	// Read Only: true
	Context *ODataQueryContext `json:"Context,omitempty"`

	// order by clause
	// Read Only: true
	OrderByClause *OrderByClause `json:"OrderByClause,omitempty"`

	// order by nodes
	// Read Only: true
	OrderByNodes []*OrderByNode `json:"OrderByNodes"`

	// raw value
	// Read Only: true
	RawValue string `json:"RawValue,omitempty"`

	// validator
	Validator OrderByQueryValidator `json:"Validator,omitempty"`
}

// Validate validates this order by query option
func (m *OrderByQueryOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderByClause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderByNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderByQueryOption) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	if m.Context != nil {
		if err := m.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Context")
			}
			return err
		}
	}

	return nil
}

func (m *OrderByQueryOption) validateOrderByClause(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderByClause) { // not required
		return nil
	}

	if m.OrderByClause != nil {
		if err := m.OrderByClause.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderByClause")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderByClause")
			}
			return err
		}
	}

	return nil
}

func (m *OrderByQueryOption) validateOrderByNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderByNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderByNodes); i++ {
		if swag.IsZero(m.OrderByNodes[i]) { // not required
			continue
		}

		if m.OrderByNodes[i] != nil {
			if err := m.OrderByNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OrderByNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OrderByNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this order by query option based on the context it is used
func (m *OrderByQueryOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderByClause(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderByNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRawValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderByQueryOption) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	if m.Context != nil {

		if swag.IsZero(m.Context) { // not required
			return nil
		}

		if err := m.Context.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Context")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Context")
			}
			return err
		}
	}

	return nil
}

func (m *OrderByQueryOption) contextValidateOrderByClause(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderByClause != nil {

		if swag.IsZero(m.OrderByClause) { // not required
			return nil
		}

		if err := m.OrderByClause.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderByClause")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderByClause")
			}
			return err
		}
	}

	return nil
}

func (m *OrderByQueryOption) contextValidateOrderByNodes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "OrderByNodes", "body", []*OrderByNode(m.OrderByNodes)); err != nil {
		return err
	}

	for i := 0; i < len(m.OrderByNodes); i++ {

		if m.OrderByNodes[i] != nil {

			if swag.IsZero(m.OrderByNodes[i]) { // not required
				return nil
			}

			if err := m.OrderByNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OrderByNodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OrderByNodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderByQueryOption) contextValidateRawValue(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "RawValue", "body", string(m.RawValue)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderByQueryOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderByQueryOption) UnmarshalBinary(b []byte) error {
	var res OrderByQueryOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
