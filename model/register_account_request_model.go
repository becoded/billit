// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisterAccountRequestModel register account request model
//
// swagger:model RegisterAccountRequestModel
type RegisterAccountRequestModel struct {

	// account settings
	AccountSettings *AccountSettings `json:"AccountSettings,omitempty"`

	// company
	Company *Party `json:"Company,omitempty"`

	// license
	License *LicenseConfiguration `json:"License,omitempty"`
}

// Validate validates this register account request model
func (m *RegisterAccountRequestModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterAccountRequestModel) validateAccountSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountSettings) { // not required
		return nil
	}

	if m.AccountSettings != nil {
		if err := m.AccountSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AccountSettings")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterAccountRequestModel) validateCompany(formats strfmt.Registry) error {
	if swag.IsZero(m.Company) { // not required
		return nil
	}

	if m.Company != nil {
		if err := m.Company.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Company")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Company")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterAccountRequestModel) validateLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.License) { // not required
		return nil
	}

	if m.License != nil {
		if err := m.License.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("License")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("License")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this register account request model based on the context it is used
func (m *RegisterAccountRequestModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompany(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicense(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterAccountRequestModel) contextValidateAccountSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountSettings != nil {

		if swag.IsZero(m.AccountSettings) { // not required
			return nil
		}

		if err := m.AccountSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AccountSettings")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterAccountRequestModel) contextValidateCompany(ctx context.Context, formats strfmt.Registry) error {

	if m.Company != nil {

		if swag.IsZero(m.Company) { // not required
			return nil
		}

		if err := m.Company.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Company")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Company")
			}
			return err
		}
	}

	return nil
}

func (m *RegisterAccountRequestModel) contextValidateLicense(ctx context.Context, formats strfmt.Registry) error {

	if m.License != nil {

		if swag.IsZero(m.License) { // not required
			return nil
		}

		if err := m.License.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("License")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("License")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterAccountRequestModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterAccountRequestModel) UnmarshalBinary(b []byte) error {
	var res RegisterAccountRequestModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
