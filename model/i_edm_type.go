// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IEdmType i edm type
//
// swagger:model IEdmType
type IEdmType struct {

	// type kind
	// Read Only: true
	// Enum: ["None","Primitive","Entity","Complex","Row","Collection","EntityReference","Enum"]
	TypeKind string `json:"TypeKind,omitempty"`
}

// Validate validates this i edm type
func (m *IEdmType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypeKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var iEdmTypeTypeTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Primitive","Entity","Complex","Row","Collection","EntityReference","Enum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iEdmTypeTypeTypeKindPropEnum = append(iEdmTypeTypeTypeKindPropEnum, v)
	}
}

const (

	// IEdmTypeTypeKindNone captures enum value "None"
	IEdmTypeTypeKindNone string = "None"

	// IEdmTypeTypeKindPrimitive captures enum value "Primitive"
	IEdmTypeTypeKindPrimitive string = "Primitive"

	// IEdmTypeTypeKindEntity captures enum value "Entity"
	IEdmTypeTypeKindEntity string = "Entity"

	// IEdmTypeTypeKindComplex captures enum value "Complex"
	IEdmTypeTypeKindComplex string = "Complex"

	// IEdmTypeTypeKindRow captures enum value "Row"
	IEdmTypeTypeKindRow string = "Row"

	// IEdmTypeTypeKindCollection captures enum value "Collection"
	IEdmTypeTypeKindCollection string = "Collection"

	// IEdmTypeTypeKindEntityReference captures enum value "EntityReference"
	IEdmTypeTypeKindEntityReference string = "EntityReference"

	// IEdmTypeTypeKindEnum captures enum value "Enum"
	IEdmTypeTypeKindEnum string = "Enum"
)

// prop value enum
func (m *IEdmType) validateTypeKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, iEdmTypeTypeTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IEdmType) validateTypeKind(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeKind) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeKindEnum("TypeKind", "body", m.TypeKind); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this i edm type based on the context it is used
func (m *IEdmType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTypeKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IEdmType) contextValidateTypeKind(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "TypeKind", "body", string(m.TypeKind)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IEdmType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IEdmType) UnmarshalBinary(b []byte) error {
	var res IEdmType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
