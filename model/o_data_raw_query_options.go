// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ODataRawQueryOptions o data raw query options
//
// swagger:model ODataRawQueryOptions
type ODataRawQueryOptions struct {

	// expand
	// Read Only: true
	Expand string `json:"Expand,omitempty"`

	// filter
	// Read Only: true
	Filter string `json:"Filter,omitempty"`

	// format
	// Read Only: true
	Format string `json:"Format,omitempty"`

	// inline count
	// Read Only: true
	InlineCount string `json:"InlineCount,omitempty"`

	// order by
	// Read Only: true
	OrderBy string `json:"OrderBy,omitempty"`

	// select
	// Read Only: true
	Select string `json:"Select,omitempty"`

	// skip
	// Read Only: true
	Skip string `json:"Skip,omitempty"`

	// skip token
	// Read Only: true
	SkipToken string `json:"SkipToken,omitempty"`

	// top
	// Read Only: true
	Top string `json:"Top,omitempty"`
}

// Validate validates this o data raw query options
func (m *ODataRawQueryOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this o data raw query options based on the context it is used
func (m *ODataRawQueryOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExpand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInlineCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelect(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkip(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkipToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTop(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ODataRawQueryOptions) contextValidateExpand(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Expand", "body", string(m.Expand)); err != nil {
		return err
	}

	return nil
}

func (m *ODataRawQueryOptions) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Filter", "body", string(m.Filter)); err != nil {
		return err
	}

	return nil
}

func (m *ODataRawQueryOptions) contextValidateFormat(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Format", "body", string(m.Format)); err != nil {
		return err
	}

	return nil
}

func (m *ODataRawQueryOptions) contextValidateInlineCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "InlineCount", "body", string(m.InlineCount)); err != nil {
		return err
	}

	return nil
}

func (m *ODataRawQueryOptions) contextValidateOrderBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "OrderBy", "body", string(m.OrderBy)); err != nil {
		return err
	}

	return nil
}

func (m *ODataRawQueryOptions) contextValidateSelect(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Select", "body", string(m.Select)); err != nil {
		return err
	}

	return nil
}

func (m *ODataRawQueryOptions) contextValidateSkip(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Skip", "body", string(m.Skip)); err != nil {
		return err
	}

	return nil
}

func (m *ODataRawQueryOptions) contextValidateSkipToken(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "SkipToken", "body", string(m.SkipToken)); err != nil {
		return err
	}

	return nil
}

func (m *ODataRawQueryOptions) contextValidateTop(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Top", "body", string(m.Top)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ODataRawQueryOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ODataRawQueryOptions) UnmarshalBinary(b []byte) error {
	var res ODataRawQueryOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
