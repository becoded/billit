// Code generated by go-swagger; DO NOT EDIT.

package peppol

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPeppolGetParticipantInformationParams creates a new PeppolGetParticipantInformationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPeppolGetParticipantInformationParams() *PeppolGetParticipantInformationParams {
	return &PeppolGetParticipantInformationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPeppolGetParticipantInformationParamsWithTimeout creates a new PeppolGetParticipantInformationParams object
// with the ability to set a timeout on a request.
func NewPeppolGetParticipantInformationParamsWithTimeout(timeout time.Duration) *PeppolGetParticipantInformationParams {
	return &PeppolGetParticipantInformationParams{
		timeout: timeout,
	}
}

// NewPeppolGetParticipantInformationParamsWithContext creates a new PeppolGetParticipantInformationParams object
// with the ability to set a context for a request.
func NewPeppolGetParticipantInformationParamsWithContext(ctx context.Context) *PeppolGetParticipantInformationParams {
	return &PeppolGetParticipantInformationParams{
		Context: ctx,
	}
}

// NewPeppolGetParticipantInformationParamsWithHTTPClient creates a new PeppolGetParticipantInformationParams object
// with the ability to set a custom HTTPClient for a request.
func NewPeppolGetParticipantInformationParamsWithHTTPClient(client *http.Client) *PeppolGetParticipantInformationParams {
	return &PeppolGetParticipantInformationParams{
		HTTPClient: client,
	}
}

/*
PeppolGetParticipantInformationParams contains all the parameters to send to the API endpoint

	for the peppol get participant information operation.

	Typically these are written to a http.Request.
*/
type PeppolGetParticipantInformationParams struct {

	// OnlyCheckDNS.
	OnlyCheckDNS *bool

	// VATorCBE.
	VATorCBE string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the peppol get participant information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PeppolGetParticipantInformationParams) WithDefaults() *PeppolGetParticipantInformationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the peppol get participant information params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PeppolGetParticipantInformationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) WithTimeout(timeout time.Duration) *PeppolGetParticipantInformationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) WithContext(ctx context.Context) *PeppolGetParticipantInformationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) WithHTTPClient(client *http.Client) *PeppolGetParticipantInformationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOnlyCheckDNS adds the onlyCheckDNS to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) WithOnlyCheckDNS(onlyCheckDNS *bool) *PeppolGetParticipantInformationParams {
	o.SetOnlyCheckDNS(onlyCheckDNS)
	return o
}

// SetOnlyCheckDNS adds the onlyCheckDns to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) SetOnlyCheckDNS(onlyCheckDNS *bool) {
	o.OnlyCheckDNS = onlyCheckDNS
}

// WithVATorCBE adds the vATorCBE to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) WithVATorCBE(vATorCBE string) *PeppolGetParticipantInformationParams {
	o.SetVATorCBE(vATorCBE)
	return o
}

// SetVATorCBE adds the vATorCBE to the peppol get participant information params
func (o *PeppolGetParticipantInformationParams) SetVATorCBE(vATorCBE string) {
	o.VATorCBE = vATorCBE
}

// WriteToRequest writes these params to a swagger request
func (o *PeppolGetParticipantInformationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OnlyCheckDNS != nil {

		// query param OnlyCheckDNS
		var qrOnlyCheckDNS bool

		if o.OnlyCheckDNS != nil {
			qrOnlyCheckDNS = *o.OnlyCheckDNS
		}
		qOnlyCheckDNS := swag.FormatBool(qrOnlyCheckDNS)
		if qOnlyCheckDNS != "" {

			if err := r.SetQueryParam("OnlyCheckDNS", qOnlyCheckDNS); err != nil {
				return err
			}
		}
	}

	// path param VATorCBE
	if err := r.SetPathParam("VATorCBE", o.VATorCBE); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
