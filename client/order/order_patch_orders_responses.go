// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// OrderPatchOrdersReader is a Reader for the OrderPatchOrders structure.
type OrderPatchOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrderPatchOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOrderPatchOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/orders/{orderID}] Order_PatchOrders", response, response.Code())
	}
}

// NewOrderPatchOrdersOK creates a OrderPatchOrdersOK with default headers values
func NewOrderPatchOrdersOK() *OrderPatchOrdersOK {
	return &OrderPatchOrdersOK{}
}

/*
OrderPatchOrdersOK describes a response with status code 200, with default header values.

Patch an order
*/
type OrderPatchOrdersOK struct {
}

// IsSuccess returns true when this order patch orders o k response has a 2xx status code
func (o *OrderPatchOrdersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this order patch orders o k response has a 3xx status code
func (o *OrderPatchOrdersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this order patch orders o k response has a 4xx status code
func (o *OrderPatchOrdersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this order patch orders o k response has a 5xx status code
func (o *OrderPatchOrdersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this order patch orders o k response a status code equal to that given
func (o *OrderPatchOrdersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the order patch orders o k response
func (o *OrderPatchOrdersOK) Code() int {
	return 200
}

func (o *OrderPatchOrdersOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/orders/{orderID}][%d] orderPatchOrdersOK", 200)
}

func (o *OrderPatchOrdersOK) String() string {
	return fmt.Sprintf("[PATCH /v1/orders/{orderID}][%d] orderPatchOrdersOK", 200)
}

func (o *OrderPatchOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
