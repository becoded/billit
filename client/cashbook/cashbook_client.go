// Code generated by go-swagger; DO NOT EDIT.

package cashbook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new cashbook API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new cashbook API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new cashbook API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for cashbook API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// WithContentTypeTextXML sets the Content-Type header to "text/xml".
func WithContentTypeTextXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// WithAcceptTextJSON sets the Accept header to "text/json".
func WithAcceptTextJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/json"}
}

// WithAcceptTextXML sets the Accept header to "text/xml".
func WithAcceptTextXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CashbookCloseCashbook(params *CashbookCloseCashbookParams, opts ...ClientOption) (*CashbookCloseCashbookOK, error)

	CashbookGetCashbook(params *CashbookGetCashbookParams, opts ...ClientOption) (*CashbookGetCashbookOK, error)

	CashbookGetCashbookEntries(params *CashbookGetCashbookEntriesParams, opts ...ClientOption) (*CashbookGetCashbookEntriesOK, error)

	CashbookGetCashbookHistory(params *CashbookGetCashbookHistoryParams, opts ...ClientOption) (*CashbookGetCashbookHistoryOK, error)

	CashbookGetCashbooks(params *CashbookGetCashbooksParams, opts ...ClientOption) (*CashbookGetCashbooksOK, error)

	CashbookInitializeCashbook(params *CashbookInitializeCashbookParams, opts ...ClientOption) (*CashbookInitializeCashbookOK, error)

	CashbookPostCashbookEntry(params *CashbookPostCashbookEntryParams, opts ...ClientOption) (*CashbookPostCashbookEntryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CashbookCloseCashbook initializes the cash book for first use
*/
func (a *Client) CashbookCloseCashbook(params *CashbookCloseCashbookParams, opts ...ClientOption) (*CashbookCloseCashbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCashbookCloseCashbookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cashbook_CloseCashbook",
		Method:             "POST",
		PathPattern:        "/v1/Cashbook/Close",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CashbookCloseCashbookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CashbookCloseCashbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cashbook_CloseCashbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CashbookGetCashbook gets the current cash book
*/
func (a *Client) CashbookGetCashbook(params *CashbookGetCashbookParams, opts ...ClientOption) (*CashbookGetCashbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCashbookGetCashbookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cashbook_GetCashbook",
		Method:             "GET",
		PathPattern:        "/v1/Cashbook",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CashbookGetCashbookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CashbookGetCashbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cashbook_GetCashbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CashbookGetCashbookEntries gets an overview of all the entries in the cash book
*/
func (a *Client) CashbookGetCashbookEntries(params *CashbookGetCashbookEntriesParams, opts ...ClientOption) (*CashbookGetCashbookEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCashbookGetCashbookEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cashbook_GetCashbookEntries",
		Method:             "GET",
		PathPattern:        "/v1/Cashbook/Entries",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CashbookGetCashbookEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CashbookGetCashbookEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cashbook_GetCashbookEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CashbookGetCashbookHistory gets an overview of all the entries in a closed cash book
*/
func (a *Client) CashbookGetCashbookHistory(params *CashbookGetCashbookHistoryParams, opts ...ClientOption) (*CashbookGetCashbookHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCashbookGetCashbookHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cashbook_GetCashbookHistory",
		Method:             "GET",
		PathPattern:        "/v1/Cashbook/{cashbookID}/History",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CashbookGetCashbookHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CashbookGetCashbookHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cashbook_GetCashbookHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CashbookGetCashbooks gets the current cash book
*/
func (a *Client) CashbookGetCashbooks(params *CashbookGetCashbooksParams, opts ...ClientOption) (*CashbookGetCashbooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCashbookGetCashbooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cashbook_GetCashbooks",
		Method:             "GET",
		PathPattern:        "/v1/Cashbook/History",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CashbookGetCashbooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CashbookGetCashbooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cashbook_GetCashbooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CashbookInitializeCashbook initializes the cash book for first use
*/
func (a *Client) CashbookInitializeCashbook(params *CashbookInitializeCashbookParams, opts ...ClientOption) (*CashbookInitializeCashbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCashbookInitializeCashbookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cashbook_InitializeCashbook",
		Method:             "POST",
		PathPattern:        "/v1/Cashbook/Initialize",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CashbookInitializeCashbookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CashbookInitializeCashbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cashbook_InitializeCashbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CashbookPostCashbookEntry adds an entry to the cash book
*/
func (a *Client) CashbookPostCashbookEntry(params *CashbookPostCashbookEntryParams, opts ...ClientOption) (*CashbookPostCashbookEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCashbookPostCashbookEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cashbook_PostCashbookEntry",
		Method:             "POST",
		PathPattern:        "/v1/Cashbook/AddEntry",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CashbookPostCashbookEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CashbookPostCashbookEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cashbook_PostCashbookEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
