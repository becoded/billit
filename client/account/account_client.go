// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new account API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new account API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// WithContentTypeTextXML sets the Content-Type header to "text/xml".
func WithContentTypeTextXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// WithAcceptTextJSON sets the Accept header to "text/json".
func WithAcceptTextJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/json"}
}

// WithAcceptTextXML sets the Accept header to "text/xml".
func WithAcceptTextXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AccountAddLicenseBillable(params *AccountAddLicenseBillableParams, opts ...ClientOption) (*AccountAddLicenseBillableOK, error)

	AccountGetAccountInformation(params *AccountGetAccountInformationParams, opts ...ClientOption) (*AccountGetAccountInformationOK, error)

	AccountGetSSOToken(params *AccountGetSSOTokenParams, opts ...ClientOption) (*AccountGetSSOTokenOK, error)

	AccountPostSequences(params *AccountPostSequencesParams, opts ...ClientOption) (*AccountPostSequencesOK, error)

	AccountRegisterCompany(params *AccountRegisterCompanyParams, opts ...ClientOption) (*AccountRegisterCompanyOK, error)

	AccountUpdateLicense(params *AccountUpdateLicenseParams, opts ...ClientOption) (*AccountUpdateLicenseOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AccountAddLicenseBillable adds new license billable
*/
func (a *Client) AccountAddLicenseBillable(params *AccountAddLicenseBillableParams, opts ...ClientOption) (*AccountAddLicenseBillableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountAddLicenseBillableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Account_AddLicenseBillable",
		Method:             "POST",
		PathPattern:        "/v1/account/license/addons",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountAddLicenseBillableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountAddLicenseBillableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Account_AddLicenseBillable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountGetAccountInformation account get account information API
*/
func (a *Client) AccountGetAccountInformation(params *AccountGetAccountInformationParams, opts ...ClientOption) (*AccountGetAccountInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountGetAccountInformationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Account_GetAccountInformation",
		Method:             "GET",
		PathPattern:        "/v1/account/accountInformation",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountGetAccountInformationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountGetAccountInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Account_GetAccountInformation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountGetSSOToken account get s s o token API
*/
func (a *Client) AccountGetSSOToken(params *AccountGetSSOTokenParams, opts ...ClientOption) (*AccountGetSSOTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountGetSSOTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Account_GetSSOToken",
		Method:             "GET",
		PathPattern:        "/v1/account/ssoToken",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountGetSSOTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountGetSSOTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Account_GetSSOToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountPostSequences account post sequences API
*/
func (a *Client) AccountPostSequences(params *AccountPostSequencesParams, opts ...ClientOption) (*AccountPostSequencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountPostSequencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Account_PostSequences",
		Method:             "POST",
		PathPattern:        "/v1/account/sequences",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountPostSequencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountPostSequencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Account_PostSequences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountRegisterCompany account register company API
*/
func (a *Client) AccountRegisterCompany(params *AccountRegisterCompanyParams, opts ...ClientOption) (*AccountRegisterCompanyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountRegisterCompanyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Account_RegisterCompany",
		Method:             "POST",
		PathPattern:        "/v1/account/registercompany",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountRegisterCompanyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountRegisterCompanyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Account_RegisterCompany: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AccountUpdateLicense updates the license
*/
func (a *Client) AccountUpdateLicense(params *AccountUpdateLicenseParams, opts ...ClientOption) (*AccountUpdateLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountUpdateLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Account_UpdateLicense",
		Method:             "POST",
		PathPattern:        "/v1/account/license",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountUpdateLicenseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountUpdateLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Account_UpdateLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
