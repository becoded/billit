// Code generated by go-swagger; DO NOT EDIT.

package einvoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new einvoice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new einvoice API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new einvoice API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for einvoice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithContentTypeTextJSON sets the Content-Type header to "text/json".
func WithContentTypeTextJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/json"}
}

// WithContentTypeTextXML sets the Content-Type header to "text/xml".
func WithContentTypeTextXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// WithAcceptTextJSON sets the Accept header to "text/json".
func WithAcceptTextJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/json"}
}

// WithAcceptTextXML sets the Accept header to "text/xml".
func WithAcceptTextXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	EinvoiceDeleteRegistration(params *EinvoiceDeleteRegistrationParams, opts ...ClientOption) (*EinvoiceDeleteRegistrationOK, error)

	EinvoiceDeleteRegistrationIntegration(params *EinvoiceDeleteRegistrationIntegrationParams, opts ...ClientOption) (*EinvoiceDeleteRegistrationIntegrationOK, error)

	EinvoiceDeleteWebhooks(params *EinvoiceDeleteWebhooksParams, opts ...ClientOption) (*EinvoiceDeleteWebhooksOK, error)

	EinvoiceGetFile(params *EinvoiceGetFileParams, opts ...ClientOption) (*EinvoiceGetFileOK, error)

	EinvoiceGetOrder(params *EinvoiceGetOrderParams, opts ...ClientOption) (*EinvoiceGetOrderOK, error)

	EinvoiceGetOrders(params *EinvoiceGetOrdersParams, opts ...ClientOption) (*EinvoiceGetOrdersOK, error)

	EinvoiceGetRegistration(params *EinvoiceGetRegistrationParams, opts ...ClientOption) (*EinvoiceGetRegistrationOK, error)

	EinvoiceGetRegistrations(params *EinvoiceGetRegistrationsParams, opts ...ClientOption) (*EinvoiceGetRegistrationsOK, error)

	EinvoiceGetWebhooks(params *EinvoiceGetWebhooksParams, opts ...ClientOption) (*EinvoiceGetWebhooksOK, error)

	EinvoicePatchEntity(params *EinvoicePatchEntityParams, opts ...ClientOption) (*EinvoicePatchEntityOK, error)

	EinvoicePatchOrder(params *EinvoicePatchOrderParams, opts ...ClientOption) (*EinvoicePatchOrderOK, error)

	EinvoicePostRegistration(params *EinvoicePostRegistrationParams, opts ...ClientOption) (*EinvoicePostRegistrationOK, error)

	EinvoicePostRegistrationIntegration(params *EinvoicePostRegistrationIntegrationParams, opts ...ClientOption) (*EinvoicePostRegistrationIntegrationOK, error)

	EinvoicePostSend(params *EinvoicePostSendParams, opts ...ClientOption) (*EinvoicePostSendOK, error)

	EinvoicePostWebhook(params *EinvoicePostWebhookParams, opts ...ClientOption) (*EinvoicePostWebhookOK, error)

	EinvoiceRefreshWebhookSecret(params *EinvoiceRefreshWebhookSecretParams, opts ...ClientOption) (*EinvoiceRefreshWebhookSecretOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EinvoiceDeleteRegistration einvoice delete registration API
*/
func (a *Client) EinvoiceDeleteRegistration(params *EinvoiceDeleteRegistrationParams, opts ...ClientOption) (*EinvoiceDeleteRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceDeleteRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_DeleteRegistration",
		Method:             "DELETE",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceDeleteRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceDeleteRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_DeleteRegistration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoiceDeleteRegistrationIntegration einvoice delete registration integration API
*/
func (a *Client) EinvoiceDeleteRegistrationIntegration(params *EinvoiceDeleteRegistrationIntegrationParams, opts ...ClientOption) (*EinvoiceDeleteRegistrationIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceDeleteRegistrationIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_DeleteRegistrationIntegration",
		Method:             "DELETE",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/integrations/{integrationID}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceDeleteRegistrationIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceDeleteRegistrationIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_DeleteRegistrationIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoiceDeleteWebhooks einvoice delete webhooks API
*/
func (a *Client) EinvoiceDeleteWebhooks(params *EinvoiceDeleteWebhooksParams, opts ...ClientOption) (*EinvoiceDeleteWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceDeleteWebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_DeleteWebhooks",
		Method:             "DELETE",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/webhooks/{webhookID}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceDeleteWebhooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceDeleteWebhooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_DeleteWebhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoiceGetFile einvoice get file API
*/
func (a *Client) EinvoiceGetFile(params *EinvoiceGetFileParams, opts ...ClientOption) (*EinvoiceGetFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceGetFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_GetFile",
		Method:             "GET",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/files/{fileID}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceGetFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceGetFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_GetFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoiceGetOrder einvoice get order API
*/
func (a *Client) EinvoiceGetOrder(params *EinvoiceGetOrderParams, opts ...ClientOption) (*EinvoiceGetOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceGetOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_GetOrder",
		Method:             "GET",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/orders/{orderID}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceGetOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceGetOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_GetOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoiceGetOrders einvoice get orders API
*/
func (a *Client) EinvoiceGetOrders(params *EinvoiceGetOrdersParams, opts ...ClientOption) (*EinvoiceGetOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceGetOrdersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_GetOrders",
		Method:             "GET",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/orders",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceGetOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceGetOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_GetOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoiceGetRegistration einvoice get registration API
*/
func (a *Client) EinvoiceGetRegistration(params *EinvoiceGetRegistrationParams, opts ...ClientOption) (*EinvoiceGetRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceGetRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_GetRegistration",
		Method:             "GET",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceGetRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceGetRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_GetRegistration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoiceGetRegistrations einvoice get registrations API
*/
func (a *Client) EinvoiceGetRegistrations(params *EinvoiceGetRegistrationsParams, opts ...ClientOption) (*EinvoiceGetRegistrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceGetRegistrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_GetRegistrations",
		Method:             "GET",
		PathPattern:        "/v1/einvoices/registrations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceGetRegistrationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceGetRegistrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_GetRegistrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoiceGetWebhooks einvoice get webhooks API
*/
func (a *Client) EinvoiceGetWebhooks(params *EinvoiceGetWebhooksParams, opts ...ClientOption) (*EinvoiceGetWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceGetWebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_GetWebhooks",
		Method:             "GET",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/webhooks",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceGetWebhooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceGetWebhooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_GetWebhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoicePatchEntity einvoice patch entity API
*/
func (a *Client) EinvoicePatchEntity(params *EinvoicePatchEntityParams, opts ...ClientOption) (*EinvoicePatchEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoicePatchEntityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_PatchEntity",
		Method:             "PATCH",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoicePatchEntityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoicePatchEntityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_PatchEntity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoicePatchOrder einvoice patch order API
*/
func (a *Client) EinvoicePatchOrder(params *EinvoicePatchOrderParams, opts ...ClientOption) (*EinvoicePatchOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoicePatchOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_PatchOrder",
		Method:             "PATCH",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/orders/{orderID}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoicePatchOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoicePatchOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_PatchOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoicePostRegistration einvoice post registration API
*/
func (a *Client) EinvoicePostRegistration(params *EinvoicePostRegistrationParams, opts ...ClientOption) (*EinvoicePostRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoicePostRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_PostRegistration",
		Method:             "POST",
		PathPattern:        "/v1/einvoices/registrations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoicePostRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoicePostRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_PostRegistration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoicePostRegistrationIntegration einvoice post registration integration API
*/
func (a *Client) EinvoicePostRegistrationIntegration(params *EinvoicePostRegistrationIntegrationParams, opts ...ClientOption) (*EinvoicePostRegistrationIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoicePostRegistrationIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_PostRegistrationIntegration",
		Method:             "POST",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/integrations",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoicePostRegistrationIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoicePostRegistrationIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_PostRegistrationIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoicePostSend einvoice post send API
*/
func (a *Client) EinvoicePostSend(params *EinvoicePostSendParams, opts ...ClientOption) (*EinvoicePostSendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoicePostSendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_PostSend",
		Method:             "POST",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/commands/send",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoicePostSendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoicePostSendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_PostSend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoicePostWebhook einvoice post webhook API
*/
func (a *Client) EinvoicePostWebhook(params *EinvoicePostWebhookParams, opts ...ClientOption) (*EinvoicePostWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoicePostWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_PostWebhook",
		Method:             "POST",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/webhooks",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoicePostWebhookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoicePostWebhookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_PostWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EinvoiceRefreshWebhookSecret einvoice refresh webhook secret API
*/
func (a *Client) EinvoiceRefreshWebhookSecret(params *EinvoiceRefreshWebhookSecretParams, opts ...ClientOption) (*EinvoiceRefreshWebhookSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEinvoiceRefreshWebhookSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Einvoice_RefreshWebhookSecret",
		Method:             "POST",
		PathPattern:        "/v1/einvoices/registrations/{registrationID}/webhooks/refresh/{webhookID}",
		ProducesMediaTypes: []string{"application/json", "text/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EinvoiceRefreshWebhookSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EinvoiceRefreshWebhookSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Einvoice_RefreshWebhookSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
